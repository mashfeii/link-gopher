// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bot_client "github.com/es-debug/backend-academy-2024-go-template/internal/api/openapi/v1/clients/bot"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientInterfaceMock is an autogenerated mock type for the ClientInterface type
type ClientInterfaceMock struct {
	mock.Mock
}

type ClientInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterfaceMock) EXPECT() *ClientInterfaceMock_Expecter {
	return &ClientInterfaceMock_Expecter{mock: &_m.Mock}
}

// PostUpdates provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientInterfaceMock) PostUpdates(ctx context.Context, body bot_client.PostUpdatesJSONRequestBody, reqEditors ...bot_client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUpdates")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bot_client.PostUpdatesJSONRequestBody, ...bot_client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bot_client.PostUpdatesJSONRequestBody, ...bot_client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bot_client.PostUpdatesJSONRequestBody, ...bot_client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterfaceMock_PostUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdates'
type ClientInterfaceMock_PostUpdates_Call struct {
	*mock.Call
}

// PostUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - body bot_client.PostUpdatesJSONRequestBody
//   - reqEditors ...bot_client.RequestEditorFn
func (_e *ClientInterfaceMock_Expecter) PostUpdates(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientInterfaceMock_PostUpdates_Call {
	return &ClientInterfaceMock_PostUpdates_Call{Call: _e.mock.On("PostUpdates",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientInterfaceMock_PostUpdates_Call) Run(run func(ctx context.Context, body bot_client.PostUpdatesJSONRequestBody, reqEditors ...bot_client.RequestEditorFn)) *ClientInterfaceMock_PostUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bot_client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(bot_client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(bot_client.PostUpdatesJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterfaceMock_PostUpdates_Call) Return(_a0 *http.Response, _a1 error) *ClientInterfaceMock_PostUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterfaceMock_PostUpdates_Call) RunAndReturn(run func(context.Context, bot_client.PostUpdatesJSONRequestBody, ...bot_client.RequestEditorFn) (*http.Response, error)) *ClientInterfaceMock_PostUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// PostUpdatesWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientInterfaceMock) PostUpdatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...bot_client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUpdatesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...bot_client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...bot_client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...bot_client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterfaceMock_PostUpdatesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdatesWithBody'
type ClientInterfaceMock_PostUpdatesWithBody_Call struct {
	*mock.Call
}

// PostUpdatesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...bot_client.RequestEditorFn
func (_e *ClientInterfaceMock_Expecter) PostUpdatesWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientInterfaceMock_PostUpdatesWithBody_Call {
	return &ClientInterfaceMock_PostUpdatesWithBody_Call{Call: _e.mock.On("PostUpdatesWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientInterfaceMock_PostUpdatesWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...bot_client.RequestEditorFn)) *ClientInterfaceMock_PostUpdatesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bot_client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(bot_client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterfaceMock_PostUpdatesWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterfaceMock_PostUpdatesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterfaceMock_PostUpdatesWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...bot_client.RequestEditorFn) (*http.Response, error)) *ClientInterfaceMock_PostUpdatesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientInterfaceMock creates a new instance of ClientInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterfaceMock {
	mock := &ClientInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
