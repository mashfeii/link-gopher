// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EventMock is an autogenerated mock type for the Event type
type EventMock struct {
	mock.Mock
}

type EventMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EventMock) EXPECT() *EventMock_Expecter {
	return &EventMock_Expecter{mock: &_m.Mock}
}

// GetDate provides a mock function with no fields
func (_m *EventMock) GetDate() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDate")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// EventMock_GetDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDate'
type EventMock_GetDate_Call struct {
	*mock.Call
}

// GetDate is a helper method to define mock.On call
func (_e *EventMock_Expecter) GetDate() *EventMock_GetDate_Call {
	return &EventMock_GetDate_Call{Call: _e.mock.On("GetDate")}
}

func (_c *EventMock_GetDate_Call) Run(run func()) *EventMock_GetDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventMock_GetDate_Call) Return(_a0 time.Time) *EventMock_GetDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventMock_GetDate_Call) RunAndReturn(run func() time.Time) *EventMock_GetDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescription provides a mock function with no fields
func (_m *EventMock) GetDescription() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDescription")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EventMock_GetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescription'
type EventMock_GetDescription_Call struct {
	*mock.Call
}

// GetDescription is a helper method to define mock.On call
func (_e *EventMock_Expecter) GetDescription() *EventMock_GetDescription_Call {
	return &EventMock_GetDescription_Call{Call: _e.mock.On("GetDescription")}
}

func (_c *EventMock_GetDescription_Call) Run(run func()) *EventMock_GetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventMock_GetDescription_Call) Return(_a0 string) *EventMock_GetDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventMock_GetDescription_Call) RunAndReturn(run func() string) *EventMock_GetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventMock creates a new instance of EventMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventMock {
	mock := &EventMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
